package io.craft.abc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Craft IDL Compiler (1.0.0)", date = "2019-2-27 17:21:32")
public interface UserService {

    io.craft.abc.model.UserModel get(java.lang.Long id) throws org.apache.thrift.TException;

    io.craft.abc.model.UserModel gets(java.util.List<java.lang.Long> ids) throws org.apache.thrift.TException;

    void ping() throws org.apache.thrift.TException;

    public static class get_args implements org.apache.thrift.TBase<get_args, get_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_args> {
    
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_args");
    
        private static final org.apache.thrift.protocol.TField SERVICENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)-1);
        private static final org.apache.thrift.protocol.TField TRACEID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceId", org.apache.thrift.protocol.TType.STRING, (short)-2);
        private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.MAP, (short)-3);
        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)0);
    
        private static final _Fields[] REQUIRES = {_Fields.SERVICENAME, _Fields.TRACEID, _Fields.HEADER, };
    
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new get_argsStandardSchemeFactory();
    
        private java.lang.String serviceName;
        private java.lang.String traceId;
        private java.util.Map<java.lang.String, java.lang.String> header;
        private java.lang.Long id;
    
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    
            SERVICENAME((short)-1, "serviceName"),
    
            TRACEID((short)-2, "traceId"),
    
            HEADER((short)-3, "header"),
    
            ID((short)0, "id"),
    
            ;
    
            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();
    
            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
    
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case -1: // serviceName
                        return SERVICENAME;
                    case -2: // traceId
                        return TRACEID;
                    case -3: // header
                        return HEADER;
                    case 0: // id
                        return ID;
                    default:
                        return null;
                }
            }
    
            /**
            * Find the _Fields constant that matches fieldId, throwing an exception
            * if it is not found.
            */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
    
            /**
            * Find the _Fields constant that matches name, or null if its not found.
            */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }
    
            private final short _thriftId;
            private final java.lang.String _fieldName;
    
            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
    
            public short getThriftFieldId() {
                return _thriftId;
            }
    
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
    
    
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(
                _Fields.SERVICENAME,
                new org.apache.thrift.meta_data.FieldMetaData(
                    "serviceName",
                    org.apache.thrift.TFieldRequirementType.REQUIRED,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING
                    )
                )
            );
            tmpMap.put(
                _Fields.TRACEID,
                new org.apache.thrift.meta_data.FieldMetaData(
                    "traceId",
                    org.apache.thrift.TFieldRequirementType.REQUIRED,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING
                    )
                )
            );
            tmpMap.put(
                _Fields.HEADER,
                new org.apache.thrift.meta_data.FieldMetaData(
                    "header",
                    org.apache.thrift.TFieldRequirementType.REQUIRED,
                    new org.apache.thrift.meta_data.MapMetaData(
                        org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)
                    )
                )
            );
            tmpMap.put(
                _Fields.ID,
                new org.apache.thrift.meta_data.FieldMetaData(
                    "id",
                    org.apache.thrift.TFieldRequirementType.OPTIONAL,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.I64
                    )
                )
            );
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_args.class, metaDataMap);
        }
    
        public get_args() {
        }
    
        public get_args(
                java.lang.String serviceName, 
                java.lang.String traceId, 
                java.util.Map<java.lang.String, java.lang.String> header, 
                java.lang.Long id
        )
        {
            this();
            this.serviceName = serviceName;
            this.traceId = traceId;
            this.header = header;
            this.id = id;
        }
    
        /**
        * Performs a deep copy on <i>other</i>.
        */
        public get_args(get_args other) {
            this.serviceName = other.serviceName;
            this.traceId = other.traceId;
            this.header = other.header;
            this.id = other.id;
        }
    
        public get_args deepCopy() {
            return new get_args(this);
        }
    
        @Override
        public void clear() {
            this.serviceName = null;
            this.traceId = null;
            this.header = null;
            this.id = null;
        }
    
        public java.lang.String getServiceName() {
            return this.serviceName;
        }
    
        public get_args setServiceName(java.lang.String serviceName) {
            this.serviceName = serviceName;
            return this;
        }
    
        public java.lang.String getTraceId() {
            return this.traceId;
        }
    
        public get_args setTraceId(java.lang.String traceId) {
            this.traceId = traceId;
            return this;
        }
    
        public java.util.Map<java.lang.String, java.lang.String> getHeader() {
            return this.header;
        }
    
        public get_args setHeader(java.util.Map<java.lang.String, java.lang.String> header) {
            this.header = header;
            return this;
        }
    
        public java.lang.Long getId() {
            return this.id;
        }
    
        public get_args setId(java.lang.Long id) {
            this.id = id;
            return this;
        }
    
    
        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SERVICENAME:
                    setServiceName((java.lang.String)value);
                    break;
                case TRACEID:
                    setTraceId((java.lang.String)value);
                    break;
                case HEADER:
                    setHeader((java.util.Map<java.lang.String, java.lang.String>)value);
                    break;
                case ID:
                    setId((java.lang.Long)value);
                    break;
            }
        }
    
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SERVICENAME:
                    return getServiceName();
                case TRACEID:
                    return getTraceId();
                case HEADER:
                    return getHeader();
                case ID:
                    return getId();
    
            }
            throw new java.lang.IllegalStateException();
        }
    
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }
    
            switch (field) {
                case SERVICENAME:
                    return serviceName != null;
                case TRACEID:
                    return traceId != null;
                case HEADER:
                    return header != null;
                case ID:
                    return id != null;
            }
            throw new java.lang.IllegalStateException();
        }
    
        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof get_args)
                return this.equals((get_args)that);
            return false;
        }
    
        public boolean equals(get_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;
    
            if (serviceName != null ? !serviceName.equals(that.serviceName) : that.serviceName != null) return false;
            if (traceId != null ? !traceId.equals(that.traceId) : that.traceId != null) return false;
            if (header != null ? !header.equals(that.header) : that.header != null) return false;
            if (id != null ? !id.equals(that.id) : that.id != null) return false;
            return true;
        }
    
        @Override
        public int hashCode() {
            int result = 0;
            result = 31 * result + (serviceName != null ? serviceName.hashCode() : 0);
            result = 31 * result + (traceId != null ? traceId.hashCode() : 0);
            result = 31 * result + (header != null ? header.hashCode() : 0);
            result = 31 * result + (id != null ? id.hashCode() : 0);
            return result;
        }
    
        @Override
        public int compareTo(get_args other) {
            return Integer.valueOf(hashCode()).compareTo(Integer.valueOf(other.hashCode()));
        }
    
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
    
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            STANDARD_SCHEME_FACTORY.getScheme().read(iprot, this);
        }
    
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            STANDARD_SCHEME_FACTORY.getScheme().write(oprot, this);
        }
    
        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("get_args(");
            sb.append("serviceName:");
            sb.append(this.serviceName);
            sb.append(",");
            sb.append("traceId:");
            sb.append(this.traceId);
            sb.append(",");
            sb.append("header:");
            sb.append(this.header);
            sb.append(",");
            sb.append("id:");
            sb.append(this.id);
            sb.append(")");
            return sb.toString();
        }
    
        public void validate() throws org.apache.thrift.TException {
            //do nth...
        }
    
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
    
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
    
        private static class get_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public get_argsStandardScheme getScheme() {
                return new get_argsStandardScheme();
            }
        }
    
        private static class get_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<get_args> {
    
            public void read(org.apache.thrift.protocol.TProtocol iprot, get_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case -1: // serviceName STRING
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.serviceName = iprot.readString();
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case -2: // traceId STRING
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.traceId = iprot.readString();
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case -3: // header MAP
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map = iprot.readMapBegin();
                                    struct.header = new java.util.HashMap<java.lang.String,java.lang.String>(2 * _map.size);
                                    java.lang.String _key;
                                    java.lang.String _val;
                                    for (int _i = 0; _i < _map.size; ++_i)
                                    {
                                        _key = iprot.readString();
                                        _val = iprot.readString();
                                        struct.header.put(_key, _val);
                                    }
                                    iprot.readMapEnd();
                                }
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 0: // id I64
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                if (struct.serviceName == null) {
                    throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceName' was not found in serialized data! Struct: " + toString());
                }
                if (struct.traceId == null) {
                    throw new org.apache.thrift.protocol.TProtocolException("Required field 'traceId' was not found in serialized data! Struct: " + toString());
                }
                if (struct.header == null) {
                    throw new org.apache.thrift.protocol.TProtocolException("Required field 'header' was not found in serialized data! Struct: " + toString());
                }
                struct.validate();
            }
    
            public void write(org.apache.thrift.protocol.TProtocol oprot, get_args struct) throws org.apache.thrift.TException {
                // check for required fields of primitive type, which can't be checked in the validate method
                if (struct.serviceName == null) {
                    throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceName' was not found in struct! Struct: " + struct.toString());
                }
                if (struct.traceId == null) {
                    throw new org.apache.thrift.protocol.TProtocolException("Required field 'traceId' was not found in struct! Struct: " + struct.toString());
                }
                if (struct.header == null) {
                    throw new org.apache.thrift.protocol.TProtocolException("Required field 'header' was not found in struct! Struct: " + struct.toString());
                }
                struct.validate();
    
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.serviceName != null) {
                    oprot.writeFieldBegin(SERVICENAME_FIELD_DESC);
                    oprot.writeString(struct.serviceName);
                    oprot.writeFieldEnd();
                }
                if (struct.traceId != null) {
                    oprot.writeFieldBegin(TRACEID_FIELD_DESC);
                    oprot.writeString(struct.traceId);
                    oprot.writeFieldEnd();
                }
                if (struct.header != null) {
                    oprot.writeFieldBegin(HEADER_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.header.size()));
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter12 : struct.header.entrySet())
                        {
                            oprot.writeString(_iter12.getKey());
                            oprot.writeString(_iter12.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    oprot.writeI64(struct.id);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
    
        }
    
    }
    
    public static class get_result implements org.apache.thrift.TBase<get_result, get_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_result> {
    
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_result");
    
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    
        private static final _Fields[] REQUIRES = {};
    
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new get_resultStandardSchemeFactory();
    
        private io.craft.abc.model.UserModel success;
    
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    
            SUCCESS((short)0, "success"),
    
            ;
    
            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();
    
            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
    
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // success
                        return SUCCESS;
                    default:
                        return null;
                }
            }
    
            /**
            * Find the _Fields constant that matches fieldId, throwing an exception
            * if it is not found.
            */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
    
            /**
            * Find the _Fields constant that matches name, or null if its not found.
            */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }
    
            private final short _thriftId;
            private final java.lang.String _fieldName;
    
            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
    
            public short getThriftFieldId() {
                return _thriftId;
            }
    
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
    
    
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(
                _Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData(
                    "success",
                    org.apache.thrift.TFieldRequirementType.OPTIONAL,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT
                    )
                )
            );
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_result.class, metaDataMap);
        }
    
        public get_result() {
        }
    
        public get_result(
                io.craft.abc.model.UserModel success
        )
        {
            this();
            this.success = success;
        }
    
        /**
        * Performs a deep copy on <i>other</i>.
        */
        public get_result(get_result other) {
            this.success = other.success;
        }
    
        public get_result deepCopy() {
            return new get_result(this);
        }
    
        @Override
        public void clear() {
            this.success = null;
        }
    
        public io.craft.abc.model.UserModel getSuccess() {
            return this.success;
        }
    
        public get_result setSuccess(io.craft.abc.model.UserModel success) {
            this.success = success;
            return this;
        }
    
    
        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    setSuccess((io.craft.abc.model.UserModel)value);
                    break;
            }
        }
    
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();
    
            }
            throw new java.lang.IllegalStateException();
        }
    
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }
    
            switch (field) {
                case SUCCESS:
                    return success != null;
            }
            throw new java.lang.IllegalStateException();
        }
    
        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof get_result)
                return this.equals((get_result)that);
            return false;
        }
    
        public boolean equals(get_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;
    
            if (success != null ? !success.equals(that.success) : that.success != null) return false;
            return true;
        }
    
        @Override
        public int hashCode() {
            int result = 0;
            result = 31 * result + (success != null ? success.hashCode() : 0);
            return result;
        }
    
        @Override
        public int compareTo(get_result other) {
            return Integer.valueOf(hashCode()).compareTo(Integer.valueOf(other.hashCode()));
        }
    
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
    
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            STANDARD_SCHEME_FACTORY.getScheme().read(iprot, this);
        }
    
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            STANDARD_SCHEME_FACTORY.getScheme().write(oprot, this);
        }
    
        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("get_result(");
            sb.append("success:");
            sb.append(this.success);
            sb.append(")");
            return sb.toString();
        }
    
        public void validate() throws org.apache.thrift.TException {
            //do nth...
        }
    
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
    
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
    
        private static class get_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public get_resultStandardScheme getScheme() {
                return new get_resultStandardScheme();
            }
        }
    
        private static class get_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<get_result> {
    
            public void read(org.apache.thrift.protocol.TProtocol iprot, get_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // success STRUCT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new io.craft.abc.model.UserModel();
                                struct.success.read(iprot);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }
    
            public void write(org.apache.thrift.protocol.TProtocol oprot, get_result struct) throws org.apache.thrift.TException {
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
    
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
    
        }
    
    }
    
    public static class gets_args implements org.apache.thrift.TBase<gets_args, gets_args._Fields>, java.io.Serializable, Cloneable, Comparable<gets_args> {
    
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gets_args");
    
        private static final org.apache.thrift.protocol.TField SERVICENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)-1);
        private static final org.apache.thrift.protocol.TField TRACEID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceId", org.apache.thrift.protocol.TType.STRING, (short)-2);
        private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.MAP, (short)-3);
        private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)0);
    
        private static final _Fields[] REQUIRES = {_Fields.SERVICENAME, _Fields.TRACEID, _Fields.HEADER, };
    
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new gets_argsStandardSchemeFactory();
    
        private java.lang.String serviceName;
        private java.lang.String traceId;
        private java.util.Map<java.lang.String, java.lang.String> header;
        private java.util.List<java.lang.Long> ids;
    
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    
            SERVICENAME((short)-1, "serviceName"),
    
            TRACEID((short)-2, "traceId"),
    
            HEADER((short)-3, "header"),
    
            IDS((short)0, "ids"),
    
            ;
    
            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();
    
            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
    
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case -1: // serviceName
                        return SERVICENAME;
                    case -2: // traceId
                        return TRACEID;
                    case -3: // header
                        return HEADER;
                    case 0: // ids
                        return IDS;
                    default:
                        return null;
                }
            }
    
            /**
            * Find the _Fields constant that matches fieldId, throwing an exception
            * if it is not found.
            */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
    
            /**
            * Find the _Fields constant that matches name, or null if its not found.
            */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }
    
            private final short _thriftId;
            private final java.lang.String _fieldName;
    
            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
    
            public short getThriftFieldId() {
                return _thriftId;
            }
    
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
    
    
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(
                _Fields.SERVICENAME,
                new org.apache.thrift.meta_data.FieldMetaData(
                    "serviceName",
                    org.apache.thrift.TFieldRequirementType.REQUIRED,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING
                    )
                )
            );
            tmpMap.put(
                _Fields.TRACEID,
                new org.apache.thrift.meta_data.FieldMetaData(
                    "traceId",
                    org.apache.thrift.TFieldRequirementType.REQUIRED,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING
                    )
                )
            );
            tmpMap.put(
                _Fields.HEADER,
                new org.apache.thrift.meta_data.FieldMetaData(
                    "header",
                    org.apache.thrift.TFieldRequirementType.REQUIRED,
                    new org.apache.thrift.meta_data.MapMetaData(
                        org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)
                    )
                )
            );
            tmpMap.put(
                _Fields.IDS,
                new org.apache.thrift.meta_data.FieldMetaData(
                    "ids",
                    org.apache.thrift.TFieldRequirementType.OPTIONAL,
                    new org.apache.thrift.meta_data.ListMetaData(
                        org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)
                    )
                )
            );
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gets_args.class, metaDataMap);
        }
    
        public gets_args() {
        }
    
        public gets_args(
                java.lang.String serviceName, 
                java.lang.String traceId, 
                java.util.Map<java.lang.String, java.lang.String> header, 
                java.util.List<java.lang.Long> ids
        )
        {
            this();
            this.serviceName = serviceName;
            this.traceId = traceId;
            this.header = header;
            this.ids = ids;
        }
    
        /**
        * Performs a deep copy on <i>other</i>.
        */
        public gets_args(gets_args other) {
            this.serviceName = other.serviceName;
            this.traceId = other.traceId;
            this.header = other.header;
            this.ids = other.ids;
        }
    
        public gets_args deepCopy() {
            return new gets_args(this);
        }
    
        @Override
        public void clear() {
            this.serviceName = null;
            this.traceId = null;
            this.header = null;
            this.ids = null;
        }
    
        public java.lang.String getServiceName() {
            return this.serviceName;
        }
    
        public gets_args setServiceName(java.lang.String serviceName) {
            this.serviceName = serviceName;
            return this;
        }
    
        public java.lang.String getTraceId() {
            return this.traceId;
        }
    
        public gets_args setTraceId(java.lang.String traceId) {
            this.traceId = traceId;
            return this;
        }
    
        public java.util.Map<java.lang.String, java.lang.String> getHeader() {
            return this.header;
        }
    
        public gets_args setHeader(java.util.Map<java.lang.String, java.lang.String> header) {
            this.header = header;
            return this;
        }
    
        public java.util.List<java.lang.Long> getIds() {
            return this.ids;
        }
    
        public gets_args setIds(java.util.List<java.lang.Long> ids) {
            this.ids = ids;
            return this;
        }
    
    
        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SERVICENAME:
                    setServiceName((java.lang.String)value);
                    break;
                case TRACEID:
                    setTraceId((java.lang.String)value);
                    break;
                case HEADER:
                    setHeader((java.util.Map<java.lang.String, java.lang.String>)value);
                    break;
                case IDS:
                    setIds((java.util.List<java.lang.Long>)value);
                    break;
            }
        }
    
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SERVICENAME:
                    return getServiceName();
                case TRACEID:
                    return getTraceId();
                case HEADER:
                    return getHeader();
                case IDS:
                    return getIds();
    
            }
            throw new java.lang.IllegalStateException();
        }
    
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }
    
            switch (field) {
                case SERVICENAME:
                    return serviceName != null;
                case TRACEID:
                    return traceId != null;
                case HEADER:
                    return header != null;
                case IDS:
                    return ids != null;
            }
            throw new java.lang.IllegalStateException();
        }
    
        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof gets_args)
                return this.equals((gets_args)that);
            return false;
        }
    
        public boolean equals(gets_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;
    
            if (serviceName != null ? !serviceName.equals(that.serviceName) : that.serviceName != null) return false;
            if (traceId != null ? !traceId.equals(that.traceId) : that.traceId != null) return false;
            if (header != null ? !header.equals(that.header) : that.header != null) return false;
            if (ids != null ? !ids.equals(that.ids) : that.ids != null) return false;
            return true;
        }
    
        @Override
        public int hashCode() {
            int result = 0;
            result = 31 * result + (serviceName != null ? serviceName.hashCode() : 0);
            result = 31 * result + (traceId != null ? traceId.hashCode() : 0);
            result = 31 * result + (header != null ? header.hashCode() : 0);
            result = 31 * result + (ids != null ? ids.hashCode() : 0);
            return result;
        }
    
        @Override
        public int compareTo(gets_args other) {
            return Integer.valueOf(hashCode()).compareTo(Integer.valueOf(other.hashCode()));
        }
    
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
    
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            STANDARD_SCHEME_FACTORY.getScheme().read(iprot, this);
        }
    
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            STANDARD_SCHEME_FACTORY.getScheme().write(oprot, this);
        }
    
        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("gets_args(");
            sb.append("serviceName:");
            sb.append(this.serviceName);
            sb.append(",");
            sb.append("traceId:");
            sb.append(this.traceId);
            sb.append(",");
            sb.append("header:");
            sb.append(this.header);
            sb.append(",");
            sb.append("ids:");
            sb.append(this.ids);
            sb.append(")");
            return sb.toString();
        }
    
        public void validate() throws org.apache.thrift.TException {
            //do nth...
        }
    
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
    
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
    
        private static class gets_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public gets_argsStandardScheme getScheme() {
                return new gets_argsStandardScheme();
            }
        }
    
        private static class gets_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<gets_args> {
    
            public void read(org.apache.thrift.protocol.TProtocol iprot, gets_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case -1: // serviceName STRING
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.serviceName = iprot.readString();
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case -2: // traceId STRING
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.traceId = iprot.readString();
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case -3: // header MAP
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map = iprot.readMapBegin();
                                    struct.header = new java.util.HashMap<java.lang.String,java.lang.String>(2 * _map.size);
                                    java.lang.String _key;
                                    java.lang.String _val;
                                    for (int _i = 0; _i < _map.size; ++_i)
                                    {
                                        _key = iprot.readString();
                                        _val = iprot.readString();
                                        struct.header.put(_key, _val);
                                    }
                                    iprot.readMapEnd();
                                }
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 0: // ids LIST
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list = iprot.readListBegin();
                                    struct.ids = new java.util.ArrayList<java.lang.Long>(_list.size);
                                    java.lang.Long _elem;
                                    for (int _i = 0; _i < _list.size; ++_i)
                                    {
                                        _elem = iprot.readI64();
                                        struct.ids.add(_elem);
                                    }
                                    iprot.readListEnd();
                                }
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                if (struct.serviceName == null) {
                    throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceName' was not found in serialized data! Struct: " + toString());
                }
                if (struct.traceId == null) {
                    throw new org.apache.thrift.protocol.TProtocolException("Required field 'traceId' was not found in serialized data! Struct: " + toString());
                }
                if (struct.header == null) {
                    throw new org.apache.thrift.protocol.TProtocolException("Required field 'header' was not found in serialized data! Struct: " + toString());
                }
                struct.validate();
            }
    
            public void write(org.apache.thrift.protocol.TProtocol oprot, gets_args struct) throws org.apache.thrift.TException {
                // check for required fields of primitive type, which can't be checked in the validate method
                if (struct.serviceName == null) {
                    throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceName' was not found in struct! Struct: " + struct.toString());
                }
                if (struct.traceId == null) {
                    throw new org.apache.thrift.protocol.TProtocolException("Required field 'traceId' was not found in struct! Struct: " + struct.toString());
                }
                if (struct.header == null) {
                    throw new org.apache.thrift.protocol.TProtocolException("Required field 'header' was not found in struct! Struct: " + struct.toString());
                }
                struct.validate();
    
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.serviceName != null) {
                    oprot.writeFieldBegin(SERVICENAME_FIELD_DESC);
                    oprot.writeString(struct.serviceName);
                    oprot.writeFieldEnd();
                }
                if (struct.traceId != null) {
                    oprot.writeFieldBegin(TRACEID_FIELD_DESC);
                    oprot.writeString(struct.traceId);
                    oprot.writeFieldEnd();
                }
                if (struct.header != null) {
                    oprot.writeFieldBegin(HEADER_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.header.size()));
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter12 : struct.header.entrySet())
                        {
                            oprot.writeString(_iter12.getKey());
                            oprot.writeString(_iter12.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.ids != null) {
                    oprot.writeFieldBegin(IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
                        for (java.lang.Long _iter10 : struct.ids)
                        {
                            oprot.writeI64(_iter10);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
    
        }
    
    }
    
    public static class gets_result implements org.apache.thrift.TBase<gets_result, gets_result._Fields>, java.io.Serializable, Cloneable, Comparable<gets_result> {
    
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gets_result");
    
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    
        private static final _Fields[] REQUIRES = {};
    
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new gets_resultStandardSchemeFactory();
    
        private io.craft.abc.model.UserModel success;
    
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    
            SUCCESS((short)0, "success"),
    
            ;
    
            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();
    
            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
    
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // success
                        return SUCCESS;
                    default:
                        return null;
                }
            }
    
            /**
            * Find the _Fields constant that matches fieldId, throwing an exception
            * if it is not found.
            */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
    
            /**
            * Find the _Fields constant that matches name, or null if its not found.
            */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }
    
            private final short _thriftId;
            private final java.lang.String _fieldName;
    
            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
    
            public short getThriftFieldId() {
                return _thriftId;
            }
    
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
    
    
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(
                _Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData(
                    "success",
                    org.apache.thrift.TFieldRequirementType.OPTIONAL,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT
                    )
                )
            );
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gets_result.class, metaDataMap);
        }
    
        public gets_result() {
        }
    
        public gets_result(
                io.craft.abc.model.UserModel success
        )
        {
            this();
            this.success = success;
        }
    
        /**
        * Performs a deep copy on <i>other</i>.
        */
        public gets_result(gets_result other) {
            this.success = other.success;
        }
    
        public gets_result deepCopy() {
            return new gets_result(this);
        }
    
        @Override
        public void clear() {
            this.success = null;
        }
    
        public io.craft.abc.model.UserModel getSuccess() {
            return this.success;
        }
    
        public gets_result setSuccess(io.craft.abc.model.UserModel success) {
            this.success = success;
            return this;
        }
    
    
        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    setSuccess((io.craft.abc.model.UserModel)value);
                    break;
            }
        }
    
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();
    
            }
            throw new java.lang.IllegalStateException();
        }
    
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }
    
            switch (field) {
                case SUCCESS:
                    return success != null;
            }
            throw new java.lang.IllegalStateException();
        }
    
        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof gets_result)
                return this.equals((gets_result)that);
            return false;
        }
    
        public boolean equals(gets_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;
    
            if (success != null ? !success.equals(that.success) : that.success != null) return false;
            return true;
        }
    
        @Override
        public int hashCode() {
            int result = 0;
            result = 31 * result + (success != null ? success.hashCode() : 0);
            return result;
        }
    
        @Override
        public int compareTo(gets_result other) {
            return Integer.valueOf(hashCode()).compareTo(Integer.valueOf(other.hashCode()));
        }
    
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
    
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            STANDARD_SCHEME_FACTORY.getScheme().read(iprot, this);
        }
    
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            STANDARD_SCHEME_FACTORY.getScheme().write(oprot, this);
        }
    
        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("gets_result(");
            sb.append("success:");
            sb.append(this.success);
            sb.append(")");
            return sb.toString();
        }
    
        public void validate() throws org.apache.thrift.TException {
            //do nth...
        }
    
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
    
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
    
        private static class gets_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public gets_resultStandardScheme getScheme() {
                return new gets_resultStandardScheme();
            }
        }
    
        private static class gets_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<gets_result> {
    
            public void read(org.apache.thrift.protocol.TProtocol iprot, gets_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // success STRUCT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new io.craft.abc.model.UserModel();
                                struct.success.read(iprot);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }
    
            public void write(org.apache.thrift.protocol.TProtocol oprot, gets_result struct) throws org.apache.thrift.TException {
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
    
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
    
        }
    
    }
    
    public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args> {
    
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");
    
        private static final org.apache.thrift.protocol.TField SERVICENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)-1);
        private static final org.apache.thrift.protocol.TField TRACEID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceId", org.apache.thrift.protocol.TType.STRING, (short)-2);
        private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.MAP, (short)-3);
    
        private static final _Fields[] REQUIRES = {_Fields.SERVICENAME, _Fields.TRACEID, _Fields.HEADER};
    
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
    
        private java.lang.String serviceName;
        private java.lang.String traceId;
        private java.util.Map<java.lang.String, java.lang.String> header;
    
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    
            SERVICENAME((short)-1, "serviceName"),
    
            TRACEID((short)-2, "traceId"),
    
            HEADER((short)-3, "header"),
    
            ;
    
            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();
    
            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
    
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case -1: // serviceName
                        return SERVICENAME;
                    case -2: // traceId
                        return TRACEID;
                    case -3: // header
                        return HEADER;
                    default:
                        return null;
                }
            }
    
            /**
            * Find the _Fields constant that matches fieldId, throwing an exception
            * if it is not found.
            */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
    
            /**
            * Find the _Fields constant that matches name, or null if its not found.
            */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }
    
            private final short _thriftId;
            private final java.lang.String _fieldName;
    
            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
    
            public short getThriftFieldId() {
                return _thriftId;
            }
    
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
    
    
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(
                _Fields.SERVICENAME,
                new org.apache.thrift.meta_data.FieldMetaData(
                    "serviceName",
                    org.apache.thrift.TFieldRequirementType.REQUIRED,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING
                    )
                )
            );
            tmpMap.put(
                _Fields.TRACEID,
                new org.apache.thrift.meta_data.FieldMetaData(
                    "traceId",
                    org.apache.thrift.TFieldRequirementType.REQUIRED,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING
                    )
                )
            );
            tmpMap.put(
                _Fields.HEADER,
                new org.apache.thrift.meta_data.FieldMetaData(
                    "header",
                    org.apache.thrift.TFieldRequirementType.REQUIRED,
                    new org.apache.thrift.meta_data.MapMetaData(
                        org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)
                    )
                )
            );
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
        }
    
        public ping_args() {
        }
    
        public ping_args(
                java.lang.String serviceName, 
                java.lang.String traceId, 
                java.util.Map<java.lang.String, java.lang.String> header
        )
        {
            this();
            this.serviceName = serviceName;
            this.traceId = traceId;
            this.header = header;
        }
    
        /**
        * Performs a deep copy on <i>other</i>.
        */
        public ping_args(ping_args other) {
            this.serviceName = other.serviceName;
            this.traceId = other.traceId;
            this.header = other.header;
        }
    
        public ping_args deepCopy() {
            return new ping_args(this);
        }
    
        @Override
        public void clear() {
            this.serviceName = null;
            this.traceId = null;
            this.header = null;
        }
    
        public java.lang.String getServiceName() {
            return this.serviceName;
        }
    
        public ping_args setServiceName(java.lang.String serviceName) {
            this.serviceName = serviceName;
            return this;
        }
    
        public java.lang.String getTraceId() {
            return this.traceId;
        }
    
        public ping_args setTraceId(java.lang.String traceId) {
            this.traceId = traceId;
            return this;
        }
    
        public java.util.Map<java.lang.String, java.lang.String> getHeader() {
            return this.header;
        }
    
        public ping_args setHeader(java.util.Map<java.lang.String, java.lang.String> header) {
            this.header = header;
            return this;
        }
    
    
        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SERVICENAME:
                    setServiceName((java.lang.String)value);
                    break;
                case TRACEID:
                    setTraceId((java.lang.String)value);
                    break;
                case HEADER:
                    setHeader((java.util.Map<java.lang.String, java.lang.String>)value);
                    break;
            }
        }
    
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SERVICENAME:
                    return getServiceName();
                case TRACEID:
                    return getTraceId();
                case HEADER:
                    return getHeader();
    
            }
            throw new java.lang.IllegalStateException();
        }
    
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }
    
            switch (field) {
                case SERVICENAME:
                    return serviceName != null;
                case TRACEID:
                    return traceId != null;
                case HEADER:
                    return header != null;
            }
            throw new java.lang.IllegalStateException();
        }
    
        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ping_args)
                return this.equals((ping_args)that);
            return false;
        }
    
        public boolean equals(ping_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;
    
            if (serviceName != null ? !serviceName.equals(that.serviceName) : that.serviceName != null) return false;
            if (traceId != null ? !traceId.equals(that.traceId) : that.traceId != null) return false;
            if (header != null ? !header.equals(that.header) : that.header != null) return false;
            return true;
        }
    
        @Override
        public int hashCode() {
            int result = 0;
            result = 31 * result + (serviceName != null ? serviceName.hashCode() : 0);
            result = 31 * result + (traceId != null ? traceId.hashCode() : 0);
            result = 31 * result + (header != null ? header.hashCode() : 0);
            return result;
        }
    
        @Override
        public int compareTo(ping_args other) {
            return Integer.valueOf(hashCode()).compareTo(Integer.valueOf(other.hashCode()));
        }
    
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
    
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            STANDARD_SCHEME_FACTORY.getScheme().read(iprot, this);
        }
    
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            STANDARD_SCHEME_FACTORY.getScheme().write(oprot, this);
        }
    
        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_args(");
            sb.append("serviceName:");
            sb.append(this.serviceName);
            sb.append(",");
            sb.append("traceId:");
            sb.append(this.traceId);
            sb.append(",");
            sb.append("header:");
            sb.append(this.header);
            sb.append(")");
            return sb.toString();
        }
    
        public void validate() throws org.apache.thrift.TException {
            //do nth...
        }
    
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
    
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
    
        private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ping_argsStandardScheme getScheme() {
                return new ping_argsStandardScheme();
            }
        }
    
        private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {
    
            public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case -1: // serviceName STRING
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.serviceName = iprot.readString();
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case -2: // traceId STRING
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.traceId = iprot.readString();
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case -3: // header MAP
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map = iprot.readMapBegin();
                                    struct.header = new java.util.HashMap<java.lang.String,java.lang.String>(2 * _map.size);
                                    java.lang.String _key;
                                    java.lang.String _val;
                                    for (int _i = 0; _i < _map.size; ++_i)
                                    {
                                        _key = iprot.readString();
                                        _val = iprot.readString();
                                        struct.header.put(_key, _val);
                                    }
                                    iprot.readMapEnd();
                                }
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                if (struct.serviceName == null) {
                    throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceName' was not found in serialized data! Struct: " + toString());
                }
                if (struct.traceId == null) {
                    throw new org.apache.thrift.protocol.TProtocolException("Required field 'traceId' was not found in serialized data! Struct: " + toString());
                }
                if (struct.header == null) {
                    throw new org.apache.thrift.protocol.TProtocolException("Required field 'header' was not found in serialized data! Struct: " + toString());
                }
                struct.validate();
            }
    
            public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
                // check for required fields of primitive type, which can't be checked in the validate method
                if (struct.serviceName == null) {
                    throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceName' was not found in struct! Struct: " + struct.toString());
                }
                if (struct.traceId == null) {
                    throw new org.apache.thrift.protocol.TProtocolException("Required field 'traceId' was not found in struct! Struct: " + struct.toString());
                }
                if (struct.header == null) {
                    throw new org.apache.thrift.protocol.TProtocolException("Required field 'header' was not found in struct! Struct: " + struct.toString());
                }
                struct.validate();
    
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.serviceName != null) {
                    oprot.writeFieldBegin(SERVICENAME_FIELD_DESC);
                    oprot.writeString(struct.serviceName);
                    oprot.writeFieldEnd();
                }
                if (struct.traceId != null) {
                    oprot.writeFieldBegin(TRACEID_FIELD_DESC);
                    oprot.writeString(struct.traceId);
                    oprot.writeFieldEnd();
                }
                if (struct.header != null) {
                    oprot.writeFieldBegin(HEADER_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.header.size()));
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter12 : struct.header.entrySet())
                        {
                            oprot.writeString(_iter12.getKey());
                            oprot.writeString(_iter12.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
    
        }
    
    }
    
    public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result> {
    
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");
    
    
        private static final _Fields[] REQUIRES = {};
    
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
    
    
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    
            ;
    
            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();
    
            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
    
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }
    
            /**
            * Find the _Fields constant that matches fieldId, throwing an exception
            * if it is not found.
            */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
    
            /**
            * Find the _Fields constant that matches name, or null if its not found.
            */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }
    
            private final short _thriftId;
            private final java.lang.String _fieldName;
    
            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
    
            public short getThriftFieldId() {
                return _thriftId;
            }
    
            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
    
    
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
        }
    
        public ping_result() {
        }
    
    
        /**
        * Performs a deep copy on <i>other</i>.
        */
        public ping_result(ping_result other) {
        }
    
        public ping_result deepCopy() {
            return new ping_result(this);
        }
    
        @Override
        public void clear() {
        }
    
    
        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
            }
        }
    
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
    
            }
            throw new java.lang.IllegalStateException();
        }
    
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }
    
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }
    
        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ping_result)
                return this.equals((ping_result)that);
            return false;
        }
    
        public boolean equals(ping_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;
    
            return true;
        }
    
        @Override
        public int hashCode() {
            int result = 0;
            return result;
        }
    
        @Override
        public int compareTo(ping_result other) {
            return Integer.valueOf(hashCode()).compareTo(Integer.valueOf(other.hashCode()));
        }
    
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
    
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            STANDARD_SCHEME_FACTORY.getScheme().read(iprot, this);
        }
    
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            STANDARD_SCHEME_FACTORY.getScheme().write(oprot, this);
        }
    
        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_result(");
            sb.append(")");
            return sb.toString();
        }
    
        public void validate() throws org.apache.thrift.TException {
            //do nth...
        }
    
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
    
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
    
        private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ping_resultStandardScheme getScheme() {
                return new ping_resultStandardScheme();
            }
        }
    
        private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {
    
            public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }
    
            public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
    
                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
    
        }
    
    }
    

    public static class Processor<I extends UserService> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {

        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends UserService> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("get", new get());
            processMap.put("gets", new gets());
            processMap.put("ping", new ping());
            return processMap;
        }

        public static class get<I extends UserService> extends org.apache.thrift.ProcessFunction<I, get_args> {

            public get() {
                super("get");
            }

            public get_args getEmptyArgsInstance() {
                return new get_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public get_result getResult(I iface, get_args args) throws org.apache.thrift.TException {
                get_result result = new get_result();
                io.craft.core.util.TraceUtil.setTraceId(args.getTraceId());
                io.craft.core.util.TraceUtil.setHeader(args.getHeader());
                result.success = iface.get(args.id);
                //请求完成之后就清空trace信息
                io.craft.core.util.TraceUtil.clear();
                return result;
            }
        }

        public static class gets<I extends UserService> extends org.apache.thrift.ProcessFunction<I, gets_args> {

            public gets() {
                super("gets");
            }

            public gets_args getEmptyArgsInstance() {
                return new gets_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public gets_result getResult(I iface, gets_args args) throws org.apache.thrift.TException {
                gets_result result = new gets_result();
                io.craft.core.util.TraceUtil.setTraceId(args.getTraceId());
                io.craft.core.util.TraceUtil.setHeader(args.getHeader());
                result.success = iface.gets(args.ids);
                //请求完成之后就清空trace信息
                io.craft.core.util.TraceUtil.clear();
                return result;
            }
        }

        public static class ping<I extends UserService> extends org.apache.thrift.ProcessFunction<I, ping_args> {

            public ping() {
                super("ping");
            }

            public ping_args getEmptyArgsInstance() {
                return new ping_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
                ping_result result = new ping_result();
                io.craft.core.util.TraceUtil.setTraceId(args.getTraceId());
                io.craft.core.util.TraceUtil.setHeader(args.getHeader());
                iface.ping();
                //请求完成之后就清空trace信息
                io.craft.core.util.TraceUtil.clear();
                return result;
            }
        }

    }

    public static class Client extends org.apache.thrift.TServiceClient implements UserService {

        public static final String SERVICE_NAME = "io.craft.abc";

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public io.craft.abc.model.UserModel get(java.lang.Long id) throws org.apache.thrift.TException
        {
            send_get(id);
            return recv_get();
        }

        private void send_get(java.lang.Long id) throws org.apache.thrift.TException
        {
            get_args args = new get_args();
            args.setServiceName(SERVICE_NAME);
            String traceId = io.craft.core.util.TraceUtil.getTraceId();
            if (traceId != null) {
                args.setTraceId(traceId);
            } else {
                args.setTraceId(io.craft.core.util.TraceUtil.generateTraceId());
            }
            args.setHeader(io.craft.core.util.TraceUtil.getHeader());
            args.setId(id);
            sendBase("get", args);
        }

        private io.craft.abc.model.UserModel recv_get() throws org.apache.thrift.TException
        {
            get_result result = new get_result();
            receiveBase(result, "get");
            if (result.success != null) {
                return result.success;
            }
            return null;
        }

        public io.craft.abc.model.UserModel gets(java.util.List<java.lang.Long> ids) throws org.apache.thrift.TException
        {
            send_gets(ids);
            return recv_gets();
        }

        private void send_gets(java.util.List<java.lang.Long> ids) throws org.apache.thrift.TException
        {
            gets_args args = new gets_args();
            args.setServiceName(SERVICE_NAME);
            String traceId = io.craft.core.util.TraceUtil.getTraceId();
            if (traceId != null) {
                args.setTraceId(traceId);
            } else {
                args.setTraceId(io.craft.core.util.TraceUtil.generateTraceId());
            }
            args.setHeader(io.craft.core.util.TraceUtil.getHeader());
            args.setIds(ids);
            sendBase("gets", args);
        }

        private io.craft.abc.model.UserModel recv_gets() throws org.apache.thrift.TException
        {
            gets_result result = new gets_result();
            receiveBase(result, "gets");
            if (result.success != null) {
                return result.success;
            }
            return null;
        }

        public void ping() throws org.apache.thrift.TException
        {
            send_ping();
            recv_ping();
        }

        private void send_ping() throws org.apache.thrift.TException
        {
            ping_args args = new ping_args();
            args.setServiceName(SERVICE_NAME);
            String traceId = io.craft.core.util.TraceUtil.getTraceId();
            if (traceId != null) {
                args.setTraceId(traceId);
            } else {
                args.setTraceId(io.craft.core.util.TraceUtil.generateTraceId());
            }
            args.setHeader(io.craft.core.util.TraceUtil.getHeader());
            sendBase("ping", args);
        }

        private void recv_ping() throws org.apache.thrift.TException
        {
            ping_result result = new ping_result();
            receiveBase(result, "ping");
        }

    }
}